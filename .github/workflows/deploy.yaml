name: Deploy to Caprover

on:
  push:
    branches:
      - "master"

env:
  REGISTRY: ghcr.io
  SERVER_IMAGE_NAME: ${{ github.repository }}-server
  CLIENT_IMAGE_NAME: ${{ github.repository }}-client
  WASP_TELEMETRY_DISABLED: 1
  SERVER_APP_URL: ${{ secrets.SERVER_APP_URL }}

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest

    outputs:
      server-image-tag: ${{ steps.meta-server.outputs.tags }}
      client-image-tag: ${{ steps.meta-client.outputs.tags }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: (server) Extract metadata
        id: meta-server
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}
    
      - name: (client) Extract metadata (tags, labels) for Docker
        id: meta-client
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE_NAME }}

      - name: Install Wasp
        shell: bash
        run: curl -sSL https://get.wasp-lang.dev/installer.sh | sh

      # TODO: maybe introduce caching of the built app or npm packages https://github.com/actions/setup-node#caching-global-packages-data

      - name: Build Wasp app
        shell: bash
        run: wasp build

      - name: Build the client
        shell: bash
        run: |
          cd ./.wasp/build/web-app
          REACT_APP_API_URL=$SERVER_APP_URL npm run build

      - name: Prepare the client Dockerfile
        shell: bash
        run: |
          cd ./.wasp/build/web-app
          echo "FROM pierrezemb/gostatic" > Dockerfile
          echo "CMD [\"-fallback\", \"index.html\", \"-enable-logging\"]" >> Dockerfile
          echo "COPY ./build /srv/http" >> Dockerfile

      - name: (server) Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./.wasp/build
          file: ./.wasp/build/Dockerfile
          push: true
          tags: ${{ steps.meta-server.outputs.tags }}
          labels: ${{ steps.meta-server.outputs.labels }}

      - name: (client) Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./.wasp/build/web-app
          file: ./.wasp/build/web-app/Dockerfile
          push: true
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-images
    steps:
      - name: (server) Deploy to Caprover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: "${{ secrets.CAPROVER_SERVER }}"
          app: "${{ secrets.SERVER_APP_NAME }}"
          token: "${{ secrets.SERVER_APP_TOKEN }}"
          image: ${{ needs.build-and-push-images.outputs.server-image-tag }}

      - name: (client) Deploy to Caprover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: "${{ secrets.CAPROVER_SERVER }}"
          app: "${{ secrets.CLIENT_APP_NAME }}"
          token: "${{ secrets.CLIENT_APP_TOKEN }}"
          image: ${{ needs.build-and-push-images.outputs.client-image-tag }}
